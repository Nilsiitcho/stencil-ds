/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ItemListaOpject } from "./components/item-lista/item-lista";
export { ItemListaOpject } from "./components/item-lista/item-lista";
export namespace Components {
    interface ItemLista {
        "checked": boolean;
        "label": string;
        "value": number;
    }
}
export interface ItemListaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLItemListaElement;
}
declare global {
    interface HTMLItemListaElementEventMap {
        "itemChecked": ItemListaOpject;
    }
    interface HTMLItemListaElement extends Components.ItemLista, HTMLStencilElement {
        addEventListener<K extends keyof HTMLItemListaElementEventMap>(type: K, listener: (this: HTMLItemListaElement, ev: ItemListaCustomEvent<HTMLItemListaElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLItemListaElementEventMap>(type: K, listener: (this: HTMLItemListaElement, ev: ItemListaCustomEvent<HTMLItemListaElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLItemListaElement: {
        prototype: HTMLItemListaElement;
        new (): HTMLItemListaElement;
    };
    interface HTMLElementTagNameMap {
        "item-lista": HTMLItemListaElement;
    }
}
declare namespace LocalJSX {
    interface ItemLista {
        "checked"?: boolean;
        "label"?: string;
        "onItemChecked"?: (event: ItemListaCustomEvent<ItemListaOpject>) => void;
        "value"?: number;
    }
    interface IntrinsicElements {
        "item-lista": ItemLista;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "item-lista": LocalJSX.ItemLista & JSXBase.HTMLAttributes<HTMLItemListaElement>;
        }
    }
}
